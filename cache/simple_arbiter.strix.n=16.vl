module simple_arbiter (
  input r_0,
  input r_1,
  input r_2,
  input r_3,
  input r_4,
  input r_5,
  input r_6,
  input r_7,
  input r_8,
  input r_9,
  input r_10,
  input r_11,
  input r_12,
  input r_13,
  input r_14,
  input r_15,
  output reg g_0,
  output reg g_1,
  output reg g_2,
  output reg g_3,
  output reg g_4,
  output reg g_5,
  output reg g_6,
  output reg g_7,
  output reg g_8,
  output reg g_9,
  output reg g_10,
  output reg g_11,
  output reg g_12,
  output reg g_13,
  output reg g_14,
  output reg g_15
);
  reg l0;
  reg l1;
  reg l2;
  reg l3;
  initial begin
    l0 = 0;
    l1 = 0;
    l2 = 0;
    l3 = 0;
  end
  assign g_0 = (!l3) & (((!l0) & (!l1)) & (!l2));
  assign g_1 = (!l3) & (((l0) & (!l1)) & (!l2));
  assign g_2 = (((!l0) & (l1)) & (!l2)) & (!l3);
  assign g_3 = (!l3) & (((l0) & (l1)) & (!l2));
  assign g_4 = (!l3) & (((!l0) & (!l1)) & (l2));
  assign g_5 = (!l3) & (((l0) & (!l1)) & (l2));
  assign g_6 = (!l3) & (((!l0) & (l1)) & (l2));
  assign g_7 = (!l3) & (((l0) & (l1)) & (l2));
  assign g_8 = (l3) & (((!l0) & (!l1)) & (!l2));
  assign g_9 = (l3) & (((l0) & (!l1)) & (!l2));
  assign g_10 = (l3) & (((!l0) & (l1)) & (!l2));
  assign g_11 = (l3) & (((l0) & (l1)) & (!l2));
  assign g_12 = (l3) & (((!l0) & (!l1)) & (l2));
  assign g_13 = (l3) & (((l0) & (!l1)) & (l2));
  assign g_14 = (l3) & (((!l0) & (l1)) & (l2));
  assign g_15 = (l3) & (((l0) & (l1)) & (l2));
  always @(posedge $global_clock) begin
    l0 <= !l0;
    l1 <= !((!((l0) & (!l1))) & (!((!l0) & (l1))));
    l2 <= !((!((!((l0) & (l1))) & (l2))) & (!(((l0) & (l1)) & (!l2))));
    l3 <= (!((l3) & (((l0) & (l1)) & (l2)))) & (!((!l3) & (!(((l0) & (l1)) & (l2)))));
  end
endmodule