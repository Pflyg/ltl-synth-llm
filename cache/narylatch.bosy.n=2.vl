module narylatch(upd, in_0, in_1, out_0, out_1);
  input upd;
  input in_0;
  input in_1;
  output out_0;
  output out_1;
  reg [1:0] state;

  assign out_0 = ((state == 2) && !(!in_0 && upd) || (state == 1) && !(!in_0 && upd) || (state == 3) && !(!(in_1 && in_0 && upd) && !(!in_1 && in_0 && upd)) || (state == 0) && !(!(in_1 && in_0 && upd) && !(!in_1 && in_0 && upd))) ? 1 : 0;
  assign out_1 = ((state == 2) && !(!(in_1 && in_0) && upd && !(in_1 && !in_0 && upd)) || (state == 1) && !(!(in_1 && !in_0 && upd) && !(in_1 && in_0 && upd)) || (state == 3) && !(!(in_1 && in_0) && upd && !(in_1 && !in_0 && upd)) || (state == 0) && !(!(in_1 && !in_0 && upd) && !(in_1 && in_0 && upd))) ? 1 : 0;

  initial
  begin
    state = 0;
  end
  always @($global_clock)
  begin
    case(state)
      1: if ((in_1 && !in_0 && upd))
           state = 3;
         else if ((in_1 && in_0 && upd))
           state = 2;
         else if ((!in_0 && upd && !in_1))
           state = 0;
         else 
           state = 1;

      0: if ((in_1 && in_0 && upd))
           state = 2;
         else if (!(!(!in_0 && upd && !in_1) && upd))
           state = 0;
         else if ((!in_1 && in_0 && upd))
           state = 1;
         else 
           state = 3;

      2: if (!(!(in_1 && in_0) && upd))
           state = 2;
         else if ((!in_0 && upd && !in_1))
           state = 0;
         else if ((in_1 && !in_0 && upd))
           state = 3;
         else 
           state = 1;

      3: if ((!in_1 && in_0 && upd))
           state = 1;
         else if ((!in_0 && upd && !in_1))
           state = 0;
         else if ((in_1 && in_0 && upd))
           state = 2;
         else 
           state = 3;

    endcase
  end
endmodule
