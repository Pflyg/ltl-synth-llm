module amba_decomposed_lock (
  input DECIDE,
  input HGRANT_0,
  input HGRANT_1,
  input HGRANT_2,
  input HGRANT_3,
  input HLOCK_0,
  input HLOCK_1,
  input HLOCK_2,
  input HLOCK_3,
  output reg LOCKED
);
  reg l0;
  reg l1;
  reg l2;
  initial begin
    l0 = 0;
    l1 = 0;
    l2 = 0;
  end
  assign LOCKED = (!((!((!((!((!(((!((HGRANT_2) & (!((!HGRANT_3) & (!HGRANT_0))))) & (!((!HGRANT_2) & ((!HGRANT_3) & (!HGRANT_0))))) & ((!((HGRANT_3) & (HGRANT_0))) & (!HGRANT_1)))) & (!(((!HGRANT_2) & ((!HGRANT_3) & (!HGRANT_0))) & (HGRANT_1))))) & (!l0))) & ((!l2) & (l1)))) & (!(((!((!l2) & (DECIDE))) & ((!l0) & (!l1))) & (!((l2) & (!((!((((!((HGRANT_2) & (!((!HGRANT_3) & (!HGRANT_0))))) & (!((!HGRANT_2) & ((!HGRANT_3) & (!HGRANT_0))))) & ((!((HLOCK_2) & (HGRANT_2))) & (!HGRANT_1))) & (!(((!((!HGRANT_3) & (!HGRANT_0))) & (!((!HLOCK_3) & (!HGRANT_0)))) & (!((!HGRANT_3) & (!HLOCK_0))))))) & (!((((!HGRANT_2) & ((!HGRANT_3) & (!HGRANT_0))) & (HGRANT_1)) & (!HLOCK_1))))))))))) & (!((!(((!((HGRANT_2) & (!((!HGRANT_3) & (!HGRANT_0))))) & (!((!HGRANT_2) & ((!HGRANT_3) & (!HGRANT_0))))) & ((!((HGRANT_3) & (HGRANT_0))) & (!HGRANT_1)))) & (!(((!HGRANT_2) & ((!HGRANT_3) & (!HGRANT_0))) & (HGRANT_1)))));
  always @(posedge $global_clock) begin
    l0 <= (!((!(((!((!((!(((!((HGRANT_2) & (!((!HGRANT_3) & (!HGRANT_0))))) & (!((!HGRANT_2) & ((!HGRANT_3) & (!HGRANT_0))))) & ((!((HGRANT_3) & (HGRANT_0))) & (!HGRANT_1)))) & (!(((!HGRANT_2) & ((!HGRANT_3) & (!HGRANT_0))) & (HGRANT_1))))) & (!l0))) & ((!l2) & (l1))) & (!((DECIDE) & (!((!(((!((HGRANT_2) & (!((!HGRANT_3) & (!HGRANT_0))))) & (!((!HGRANT_2) & ((!HGRANT_3) & (!HGRANT_0))))) & ((!((HGRANT_3) & (HGRANT_0))) & (!HGRANT_1)))) & (!(((!HGRANT_2) & ((!HGRANT_3) & (!HGRANT_0))) & (HGRANT_1))))))))) & (!((!((!DECIDE) & ((l2) & (!((!((((!((HGRANT_2) & (!((!HGRANT_3) & (!HGRANT_0))))) & (!((!HGRANT_2) & ((!HGRANT_3) & (!HGRANT_0))))) & ((!((HLOCK_2) & (HGRANT_2))) & (!HGRANT_1))) & (!(((!((!HGRANT_3) & (!HGRANT_0))) & (!((!HLOCK_3) & (!HGRANT_0)))) & (!((!HGRANT_3) & (!HLOCK_0))))))) & (!((((!HGRANT_2) & ((!HGRANT_3) & (!HGRANT_0))) & (HGRANT_1)) & (!HLOCK_1)))))))) & (!((!((!l0) & (!l1))) & (!((!l2) & (!l1))))))))) & (!(((DECIDE) & (!((!(((!((HGRANT_2) & (!((!HGRANT_3) & (!HGRANT_0))))) & (!((!HGRANT_2) & ((!HGRANT_3) & (!HGRANT_0))))) & ((!((HGRANT_3) & (HGRANT_0))) & (!HGRANT_1)))) & (!(((!HGRANT_2) & ((!HGRANT_3) & (!HGRANT_0))) & (HGRANT_1)))))) & (!l0)));
    l1 <= ((!DECIDE) & (!((!((!l0) & (!l1))) & (!((!l2) & (l1)))))) & (!((!(((!((HGRANT_2) & (!((!HGRANT_3) & (!HGRANT_0))))) & (!((!HGRANT_2) & ((!HGRANT_3) & (!HGRANT_0))))) & ((!((HGRANT_3) & (HGRANT_0))) & (!HGRANT_1)))) & (!(((!HGRANT_2) & ((!HGRANT_3) & (!HGRANT_0))) & (HGRANT_1)))));
    l2 <= ((DECIDE) & (!((!(((!((HGRANT_2) & (!((!HGRANT_3) & (!HGRANT_0))))) & (!((!HGRANT_2) & ((!HGRANT_3) & (!HGRANT_0))))) & ((!((HGRANT_3) & (HGRANT_0))) & (!HGRANT_1)))) & (!(((!HGRANT_2) & ((!HGRANT_3) & (!HGRANT_0))) & (HGRANT_1)))))) & (!((!((!l0) & (!l1))) & (!((!l2) & (l1)))));
  end
endmodule