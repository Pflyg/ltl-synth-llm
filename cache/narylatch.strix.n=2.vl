module narylatch (
  input in_0,
  input in_1,
  input upd,
  output reg out_0,
  output reg out_1
);
  reg l0;
  reg l1;
  reg l2;
  initial begin
    l0 = 0;
    l1 = 0;
    l2 = 0;
  end
  assign out_0 = !((!((!((!((!l0) & (!l1))) & (l2))) & ((upd) & (in_0)))) & (!((!((!l0) & ((l1) & (!l2)))) & (!((!((!upd) & (!((!((!l0) & ((l1) & (!l2)))) & (!(((!l0) & (!l1)) & (l2))))))) & (!((!upd) & ((l1) & (!l2)))))))));
  assign out_1 = !((!((!upd) & (!((!((!l0) & ((l1) & (!l2)))) & (!(((!l0) & (!l1)) & (l2))))))) & (!(((upd) & (in_1)) & (!((!((!l0) & (!l1))) & (l2))))));
  always @(posedge $global_clock) begin
    l0 <= (!((!upd) & (!((l0) & (!l2))))) & (!((upd) & (!((!((!((!l0) & (!l1))) & (l2))) & (!in_1)))));
    l1 <= !((!((!upd) & ((l1) & (!l2)))) & (!((!((!((!((!((!l0) & (!l1))) & (l2))) & (!in_1))) & (in_0))) & (!((!(((upd) & (in_1)) & (!((!((!l0) & (!l1))) & (l2))))) & (!((upd) & (in_0))))))));
    l2 <= ((!((!upd) & ((l1) & (!l2)))) & (!((!((!((!((!((!l0) & (!l1))) & (l2))) & (!in_1))) & (in_0))) & (!((!(((upd) & (in_1)) & (!((!((!l0) & (!l1))) & (l2))))) & (!((upd) & (in_0)))))))) & (!((!((!((!((!l0) & (!l1))) & (l2))) & ((upd) & (in_0)))) & (!((!((!l0) & ((l1) & (!l2)))) & (!((!((!upd) & (!((!((!l0) & ((l1) & (!l2)))) & (!(((!l0) & (!l1)) & (l2))))))) & (!((!upd) & ((l1) & (!l2))))))))));
  end
endmodule