module ltl2dba_alpha (
  input p,
  input q,
  output reg acc
);
  reg l0;
  reg l1;
  reg l2;
  reg l3;
  reg l4;
  initial begin
    l0 = 0;
    l1 = 0;
    l2 = 0;
    l3 = 0;
    l4 = 0;
  end
  assign acc = (((!l1) & (!l2)) & ((!l3) & (l4))) & (!((!((q) & (p))) & (!l0)));
  always @(posedge $global_clock) begin
    l0 <= !((!((((!l1) & (!l2)) & ((!l3) & (l4))) & (!((!((q) & (p))) & (!l0))))) & (!((((q) & (p)) & (!l0)) & (!l4))));
    l1 <= (!((!((l1) & (((q) & (p)) & (!l0)))) & (!((!l1) & (((q) & (p)) & (l0)))))) & (!l4);
    l2 <= (!((!(((l1) & (((q) & (p)) & (l0))) & (!l2))) & (!((l2) & (!((!(((q) & (p)) & (!l0))) & (!((!l1) & (((q) & (p)) & (l0)))))))))) & (!l4);
    l3 <= (!(((l3) & ((!(((q) & (p)) & (!l0))) & (!((!l1) & (((q) & (p)) & (l0)))))) & (!(((l1) & (((q) & (p)) & (l0))) & (!l2))))) & (!((!((l3) & (!l4))) & (!((((l1) & (((q) & (p)) & (l0))) & (l2)) & (!l4)))));
    l4 <= !((!((((!l1) & (!l2)) & ((!l3) & (l4))) & (!((!((q) & (p))) & (!l0))))) & (!(((l3) & (!l4)) & (((l1) & (((q) & (p)) & (l0))) & (l2)))));
  end
endmodule