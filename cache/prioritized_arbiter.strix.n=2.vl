module prioritized_arbiter (
  input r_0,
  input r_1,
  input r_m,
  output reg g_0,
  output reg g_1,
  output reg g_m
);
  reg l0;
  reg l1;
  reg l2;
  initial begin
    l0 = 0;
    l1 = 0;
    l2 = 0;
  end
  assign g_0 = ((l0) & (!l1)) & (!l2);
  assign g_1 = (!((l0) & (!((!l1) & (l2))))) & (!((!l0) & (!((l1) & (!l2)))));
  assign g_m = (!((!((l0) & (!((!l1) & (l2))))) & (!((!l0) & (!((l1) & (!l2))))))) & ((!((r_m) & (l1))) & (!(((l0) & (!((!l1) & (l2)))) & (!((l1) & (!l2))))));
  always @(posedge $global_clock) begin
    l0 <= (!((r_m) & (!((!(((l0) & (!l1)) & (!l2))) & (!((!l0) & (l2))))))) & (!(((l0) & (!((!l1) & (l2)))) & (!((l1) & (!l2)))));
    l1 <= !((!((((l0) & (!l1)) & (!l2)) & (!r_m))) & (!((r_m) & (!(((l0) & (!((!l1) & (l2)))) & (!((l1) & (!l2))))))));
    l2 <= !((!((r_m) & (!((!(((l0) & (!l1)) & (!l2))) & (!((!l0) & (l2))))))) & (!((!l0) & (l2))));
  end
endmodule