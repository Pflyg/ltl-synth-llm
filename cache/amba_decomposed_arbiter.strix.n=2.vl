module amba_decomposed_arbiter (
  input ALLREADY,
  input HBUSREQ_0,
  input HBUSREQ_1,
  output reg BUSREQ,
  output reg DECIDE,
  output reg HGRANT_0,
  output reg HGRANT_1
);
  reg l0;
  reg l1;
  reg l2;
  initial begin
    l0 = 0;
    l1 = 0;
    l2 = 0;
  end
  assign BUSREQ = !((!((!((!(((!((l0) & ((l1) & (!l2)))) & (!((!l0) & ((!l1) & (l2))))) & (!(((!((l1) & (!l2))) & (!((!l1) & (l2)))) & (!((!l0) & ((ALLREADY) & (!l1)))))))) & (!((!((!((l1) & (!l2))) & (!((!l1) & (l2))))) & (HBUSREQ_1))))) & (HBUSREQ_0))) & (!(((!((!((l0) & ((l1) & (!l2)))) & (!((!l0) & ((!l1) & (l2)))))) & (!HBUSREQ_0)) & (HBUSREQ_1))));
  assign DECIDE = !((!(((!((!((l0) & ((l1) & (!l2)))) & (!((!l0) & ((!l1) & (l2)))))) & (!HBUSREQ_0)) & ((ALLREADY) & (!((ALLREADY) & (!l1)))))) & (!(((ALLREADY) & (!((!((!((!((l1) & (!l2))) & (!((!l1) & (l2))))) & (HBUSREQ_1))) & (!((!l1) & (l2)))))) & (!l0))));
  assign HGRANT_0 = ((!((l0) & ((l1) & (!l2)))) & (!((!l0) & ((!l1) & (l2))))) & (!(((!((l1) & (!l2))) & (!((!l1) & (l2)))) & (!((!l0) & ((ALLREADY) & (!l1))))));
  assign HGRANT_1 = !((!((l0) & ((l1) & (!l2)))) & (!((!l0) & ((!l1) & (l2)))));
  always @(posedge $global_clock) begin
    l0 <= !((!((!((!((!l1) & (((!((l1) & (!l2))) & (!((!l1) & (l2)))) & (!((!l0) & ((ALLREADY) & (!l1))))))) & (!(((ALLREADY) & (!((!((!((!((l1) & (!l2))) & (!((!l1) & (l2))))) & (HBUSREQ_1))) & (!((!l1) & (l2)))))) & (!l0))))) & (HBUSREQ_0))) & (!((!((!(((l0) & (!l2)) & (!((ALLREADY) & (!((ALLREADY) & (!l1))))))) & (!((!((!((ALLREADY) & (!((!((!((!((l1) & (!l2))) & (!((!l1) & (l2))))) & (HBUSREQ_1))) & (!((!l1) & (l2))))))) & (l1))) & ((!l0) & (!((ALLREADY) & (!l1)))))))) & (!HBUSREQ_0))));
    l1 <= (!((!((!((l0) & ((l1) & (!l2)))) & (!((!l0) & ((!l1) & (l2)))))) & (HBUSREQ_0))) & (!(((!((l1) & (!l2))) & (!((!l1) & (l2)))) & (!((!l0) & ((ALLREADY) & (!l1))))));
    l2 <= (!((!((l0) & ((l1) & (!l2)))) & (!((!l0) & ((!l1) & (l2)))))) & (HBUSREQ_0);
  end
endmodule