module full_arbiter (
  input r_0,
  input r_1,
  output reg g_0,
  output reg g_1
);
  reg l0;
  reg l1;
  reg l2;
  reg l3;
  initial begin
    l0 = 0;
    l1 = 0;
    l2 = 0;
    l3 = 0;
  end
  assign g_0 = !((!((((!l1) & (r_1)) & ((!l2) & (l0))) & (l3))) & (!((!((!((r_1) & ((r_0) & (l2)))) & (l0))) & ((l1) & (!l3)))));
  assign g_1 = (!((!(((l3) & ((!l2) & (!l0))) & (!((!((l1) & (!l0))) & (!r_0))))) & (!((!(((!((!r_0) & (((l1) & (!l0)) & (!r_1)))) & (!((!l2) & (l0)))) & (!(((!l1) & (!((!r_0) & (!r_1)))) & (!((!((r_1) & ((r_0) & (l2)))) & (!l0))))))) & (!l3))))) & (!((!((!((r_1) & ((r_0) & (l2)))) & (l0))) & ((l1) & (!l3))));
  always @(posedge $global_clock) begin
    l0 <= !((!(((l3) & ((!l2) & (!l0))) & ((!((l1) & ((!l2) & (l0)))) & ((!r_0) & (!(((l1) & (!l0)) & (!r_1))))))) & (!((!(((!(((!l1) & (r_1)) & ((!l2) & (!l0)))) & (!(((l1) & (!l0)) & (!r_1)))) & (!((!((l1) & ((!l2) & (l0)))) & ((r_1) & ((!((l1) & (!l0))) & (!r_0))))))) & (!l3))));
    l1 <= !((!((!((!((((!l1) & (r_1)) & ((!l2) & (l0))) & (!r_0))) & (!((r_0) & (!((l1) & ((!l2) & (l0)))))))) & ((l3) & (!((r_0) & (l2)))))) & (!(((!((r_0) & (((l1) & (!l0)) & (!r_1)))) & (!l3)) & (!((!((l1) & ((!l2) & (l0)))) & ((!r_0) & (!(((l1) & (!l0)) & (!r_1)))))))));
    l2 <= !((!(((l3) & ((!l2) & (!l0))) & (!((!((l1) & (!l0))) & (!r_0))))) & (!((!(((!((!r_0) & (((l1) & (!l0)) & (!r_1)))) & (!((!l2) & (l0)))) & (!(((!l1) & (!((!r_0) & (!r_1)))) & (!((!((r_1) & ((r_0) & (l2)))) & (!l0))))))) & (!l3))));
    l3 <= (!((!((((!l1) & (r_1)) & ((!l2) & (l0))) & (l3))) & (!((!((!((r_1) & ((r_0) & (l2)))) & (l0))) & ((l1) & (!l3)))))) & (!((!(((!((!r_0) & (((l1) & (!l0)) & (!r_1)))) & (!((!l2) & (l0)))) & (!(((!l1) & (!((!r_0) & (!r_1)))) & (!((!((r_1) & ((r_0) & (l2)))) & (!l0))))))) & (!l3)));
  end
endmodule