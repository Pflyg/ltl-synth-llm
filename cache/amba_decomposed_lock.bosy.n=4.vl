module amba_decomposed_lock(decide, hlock_0, hlock_1, hlock_2, hlock_3, hgrant_0, hgrant_1, hgrant_2, hgrant_3, locked);
  input decide;
  input hlock_0;
  input hlock_1;
  input hlock_2;
  input hlock_3;
  input hgrant_0;
  input hgrant_1;
  input hgrant_2;
  input hgrant_3;
  output locked;
  reg [1:0] state;

  assign locked = ((state == 3) && !(!(!(!hgrant_2 && !hlock_3) && !(!hgrant_3 && !hlock_2) && !hgrant_1 && !hgrant_0 && !(!hgrant_3 && !hgrant_2) && !(hgrant_3 && hgrant_2)) && !(!(!(!hgrant_1 && hgrant_0 && hlock_0) && !(hgrant_1 && !hgrant_0 && hlock_1)) && !hgrant_3 && !hgrant_2)) || (state == 2) && !(!(!(!(hgrant_1 && !hgrant_0) && !(!hgrant_1 && hgrant_0)) && !hgrant_3 && !hgrant_2) && !(!hgrant_1 && !hgrant_0 && !(!hgrant_3 && !hgrant_2) && !(hgrant_3 && hgrant_2)))) ? 1 : 0;

  initial
  begin
    state = 0;
  end
  always @($global_clock)
  begin
    case(state)
      1: if ((!(!(!(hgrant_1 && !hgrant_0) && !(!hgrant_1 && hgrant_0)) && !hgrant_3 && !hgrant_2) && !(!hgrant_1 && !hgrant_0 && !(!hgrant_3 && !hgrant_2) && !(hgrant_3 && hgrant_2))))
           state = 2;
         else if ((!(!(!(!(hgrant_1 && !hgrant_0) && !(!hgrant_1 && hgrant_0)) && !hgrant_3 && !hgrant_2) && !(!hgrant_1 && !hgrant_0 && !(!hgrant_3 && !hgrant_2) && !(hgrant_3 && hgrant_2))) && !decide))
           state = 0;
         else 
           state = 3;

      2: if ((!(!(!(!(hgrant_1 && !hgrant_0) && !(!hgrant_1 && hgrant_0)) && !hgrant_3 && !hgrant_2) && !(!hgrant_1 && !hgrant_0 && !(!hgrant_3 && !hgrant_2) && !(hgrant_3 && hgrant_2))) && !decide))
           state = 2;
         else if ((!(!(!(hgrant_1 && !hgrant_0) && !(!hgrant_1 && hgrant_0)) && !hgrant_3 && !hgrant_2) && !(!hgrant_1 && !hgrant_0 && !(!hgrant_3 && !hgrant_2) && !(hgrant_3 && hgrant_2))))
           state = 0;
         else 
           state = 3;

      0: if ((!(!hgrant_1 && !hgrant_0 && !(!hgrant_3 && !hgrant_2) && !(hgrant_3 && hgrant_2) && decide) && !(!hgrant_2 && decide && hgrant_1 && !hgrant_0 && !hgrant_3) && !(!hgrant_3 && !hgrant_2 && decide && !hgrant_1 && hgrant_0)))
           state = 0;
         else 
           state = 3;

      3: if ((!(!(!(hgrant_1 && !hgrant_0) && !(!hgrant_1 && hgrant_0)) && !hgrant_3 && !hgrant_2) && !(!hgrant_1 && !hgrant_0 && !(!hgrant_3 && !hgrant_2) && !(hgrant_3 && hgrant_2))))
           state = 0;
         else if ((!(!(!(!hgrant_1 && hgrant_0 && !hlock_0) && !(hgrant_1 && !hgrant_0 && !hlock_1)) && !hgrant_3 && !hgrant_2) && !(hgrant_2 && decide && !hgrant_1 && !hgrant_0 && !hgrant_3) && !(!hgrant_1 && !hgrant_0 && !(!hgrant_3 && !hgrant_2) && !(hgrant_3 && hgrant_2) && decide) && !(!hgrant_2 && decide && hgrant_1 && !hgrant_0 && !hgrant_3) && !(!hgrant_3 && !hgrant_2 && decide && !hgrant_1 && hgrant_0) && !(!(!(!hgrant_2 && !hlock_3) && !(!hgrant_3 && !hlock_2)) && !(!hgrant_3 && !hgrant_2) && !hgrant_1 && !hgrant_0) && !(!(!(!(hgrant_1 && !hgrant_0) && !(!hgrant_1 && hgrant_0)) && !hgrant_3 && !hgrant_2) && !(!hgrant_1 && !hgrant_0 && !(!hgrant_3 && !hgrant_2) && !(hgrant_3 && hgrant_2))) && !decide))
           state = 2;
         else if (!(!(!hgrant_1 && !hgrant_0 && !(!hgrant_3 && !hgrant_2) && !(hgrant_3 && hgrant_2) && decide) && !(!hgrant_2 && decide && hgrant_1 && !hgrant_0 && !hgrant_3) && !(!hgrant_3 && !hgrant_2 && decide && !hgrant_1 && hgrant_0)))
           state = 3;
         else 
           state = 1;

    endcase
  end
endmodule
